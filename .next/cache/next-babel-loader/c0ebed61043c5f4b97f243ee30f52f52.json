{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs-extra\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nconst cmsDirectory = path.join(process.cwd(), \"cms\");\nconst postsDirectory = path.join(cmsDirectory, \"posts\");\n\nconst getJson = async src => {\n  const filePath = path.join(cmsDirectory, src);\n  const data = await fs.readFile(filePath, \"utf8\");\n  return JSON.parse(data);\n};\n\nconst getMarkdown = async src => {\n  const fullPath = path.join(cmsDirectory, src);\n  const fileContents = await fs.readFile(fullPath, \"utf8\"); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the content\n\n  return _objectSpread({\n    contentHtml\n  }, matterResult.data);\n};\n\nexport async function getSettings() {\n  const result = await getJson(\"settings.json\");\n  const {\n    theme,\n    md,\n    fontSize,\n    images\n  } = result.ogImage;\n  result.ogImage = `https://og-image.now.sh/${encodeURI(result.title)}.png?theme=${theme}&md=${md}&fontSize=${fontSize}&images=${encodeURI(images)}`;\n  return result;\n}\nexport async function getServices() {\n  return await getJson(\"services.json\");\n}\nexport async function getProjects() {\n  return await getJson(\"projects.json\");\n}\nexport async function getVideos() {\n  return await getJson(\"videos.json\");\n}\nexport async function getHero() {\n  return getMarkdown(\"hero.md\");\n}\nexport async function getAbout() {\n  return getMarkdown(\"about.md\");\n}\n/* Posts */\n\nexport async function getPostIds() {\n  const fileNames = await fs.readdir(postsDirectory);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, \"\")\n      }\n    };\n  });\n}\nexport async function getPosts() {\n  const fileNames = await fs.readdir(postsDirectory);\n  const items = [];\n\n  for (const fileName of fileNames) {\n    const id = fileName.replace(/\\.md$/, \"\");\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = await fs.readFile(fullPath, \"utf8\");\n    const matterResult = matter(fileContents);\n    const processedContent = await remark().use(html).process(matterResult.content);\n    const contentHtml = processedContent.toString();\n    items.push(_objectSpread({\n      id,\n      html: contentHtml\n    }, matterResult.data));\n  }\n\n  return items.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport async function getPostById(id) {\n  const fileName = `${id}.md`;\n  const fullPath = path.join(postsDirectory, fileName);\n  const fileContents = await fs.readFile(fullPath, \"utf8\");\n  const matterResult = matter(fileContents);\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    id,\n    html: contentHtml\n  }, matterResult.data);\n}","map":null,"metadata":{},"sourceType":"module"}